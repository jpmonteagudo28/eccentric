clt.df[i, match(n, N)] <- (mean(clt.sample) - mu) / (sd(clt.sample) / sqrt(n))
}
}
colnames(clt.df) <- N
return(clt.df)
}
clt(N = c(10,50,100),invcdf = "runif(n,-1,1)")
clt(N = c(10,50,100),invcdf = "runif(n,-1,1)") -> test2
View(test2)
?complete.cases
simulate_clt <- function(n = NULL,
inverse = NULL,
samples = 249,
...){
stopifnot(is.numeric(n),
is.null(inverse) || is.character(inverse),
is.null(samples) || is.numeric(samples)
)
if(min(n) <= 1 || !is.numeric(n) || !is.atomic(n)){
stop("n must be an atomic vector of integers greater than 1")
}
# Capture extra arguments passed to inverse
dots <- list(...)
# Check if dots are empty or of an invalid class
if(is_empty(dots) && !is.null(dots) && !(is.character(dots) || is.logical(dots))){
message("Default location and scale parameters will be used unless specified as extra arguments
in the function")
} else if(is.character(dots) || is.logical(dots)){
stop("Optional arguments must be numeric, not of class character or logical")
} else if(is.null(dots)){
stop("Optional arguments cannot be null")
} else {
message("Extra arguments will be passed to inverse function specified")
}
# What values can the inverse arg take?
inverse <- match.arg(inverse,
choices = c(
'rbeta','rbinom','rcauchy'
,'rchisq','rexp','rf'
,'rgamma','rgeom','rhyper'
,'rlnorm','rmultinorm','rnbinom'
,'rnorm','rpois','rt'
,'runif','rweibull','rsignrank'
,'rwilcox','rlogis'
),
several.ok = FALSE
)
# Set up vector of values for inverse function
randomly_gen_data <- if (!is_empty(dots)) {
data_list <- lapply(n, function(size) {
do.call(get(inverse), c(list(n = size), dots))
})
} else {
data_list <- lapply(n, function(size) {
get(inverse)(n = size)
})
}
randomly_gen_data <- lapply(randomly_gen_data, apply_na_padding, n)
# Combine padded data into a matrix
randomly_gen_data_matrix <- do.call(cbind, randomly_gen_data)
randomly_gen_data_matrix <- randomly_gen_data_matrix[, complete.cases(t(randomly_gen_data_matrix))]
# Standardize vector of values for inverse function
centered_random_data <- scale(randomly_gen_data_matrix)
# Resample with replacement from vector of values for inverse
resampled_data <- lapply(1:length(n),
function(i) {
sample(
centered_random_data,
size = samples,
replace = TRUE
)
}
)
resampled_data_df <- data.frame(resampled_data)
colnames(resampled_data_df) <- as.character(n)
return(resampled_data_df)
}
is_empty <- function(x){
(length(x) == 0L)
}
apply_na_padding <- function(data,n){
max_len <- max(n)
length(data) <- max_len
return(data)
}
simulate_clt(n = c(10,50,100),inverse = "rcauchy")
?map
?Map
?na.omit
simulate_clt <- function(n = NULL,
inverse = NULL,
samples = 249,
...){
stopifnot(is.numeric(n),
is.null(inverse) || is.character(inverse),
is.null(samples) || is.numeric(samples)
)
if(min(n) <= 1 || !is.numeric(n)){
stop("n must be an atomic vector of integers greater than 1")
}
# Capture extra arguments passed to inverse
dots <- list(...)
# Check if dots are empty or of an invalid class
if(is_empty(dots) && !is.null(dots) && !(is.character(dots) || is.logical(dots))){
message("Default location and scale parameters will be used unless specified as extra arguments
in the function")
} else if(is.character(dots) || is.logical(dots)){
stop("Optional arguments must be numeric, not of class character or logical")
} else if(is.null(dots)){
stop("Optional arguments cannot be null")
} else {
message("Extra arguments will be passed to inverse function specified")
}
# What values can the inverse arg take?
inverse <- match.arg(inverse,
choices = c(
'rbeta','rbinom','rcauchy'
,'rchisq','rexp','rf'
,'rgamma','rgeom','rhyper'
,'rlnorm','rmultinorm','rnbinom'
,'rnorm','rpois','rt'
,'runif','rweibull','rsignrank'
,'rwilcox','rlogis'
),
several.ok = FALSE
)
# Set up vector of values for inverse function
randomly_gen_data <- if (!is_empty(dots)) {
lapply(n, function(size) {
do.call(get(inverse), c(list(n = size), dots))
})
} else {
lapply(n, function(size) {
get(inverse)(n = size)
})
}
randomly_gen_data <- Map(apply_na_padding, randomly_gen_data, n)
# Combine padded data into a matrix
randomly_gen_data_matrix <- do.call(cbind, randomly_gen_data)
randomly_gen_data_matrix <- randomly_gen_data_matrix[complete.cases(randomly_gen_data_matrix), ]
# Standardize vector of values for inverse function
centered_random_data <- scale(randomly_gen_data_matrix)
# Resample with replacement from vector of values for inverse
resampled_data <- lapply(1:length(n),
function(i) {
sample(
sample(
na.omit(
centered_random_data[, i]
),
size = samples,
replace = TRUE)
)
}
)
resampled_data_df <- data.frame(resampled_data)
colnames(resampled_data_df) <- as.character(n)
return(resampled_data_df)
}
simulate_clt(n = c(10,50,100),inverse = "rcauchy")
simulate_clt(n = c(10,50,100),inverse = "rcauchy") -> test
View(test)
simulate_clt(n = c(10,50,100),inverse = "rcauchy",location = 1, scale = 2) -> test2
View(test2)
View(test)
simulate_clt <- function(n = NULL,
inverse = NULL,
samples = 249,
...){
stopifnot(is.numeric(n),
is.null(inverse) || is.character(inverse),
is.null(samples) || is.numeric(samples)
)
if(min(n) <= 1 || !is.numeric(n)){
stop("n must be an atomic vector of integers greater than 1")
}
# Capture extra arguments passed to inverse
dots <- list(...)
# Check if dots are empty or of an invalid class
if(is_empty(dots) && !is.null(dots)){
message("Default location and scale parameters will be used unless specified as extra arguments
in the function")
} else if(any(sapply(dots, function(x) is.character(x) || is.logical(x)))) {
stop("Optional arguments must be numeric")
} else {
message("Extra arguments will be passed to inverse function")
}
else {
simulate_clt <- function(n = NULL,
inverse = NULL,
samples = 249,
...){
stopifnot(is.numeric(n),
is.null(inverse) || is.character(inverse),
is.null(samples) || is.numeric(samples)
)
if(min(n) <= 1 || !is.numeric(n)){
stop("n must be an atomic vector of integers greater than 1")
}
# Capture extra arguments passed to inverse
dots <- list(...)
# Check if dots are empty or of an invalid class
if(is_empty(dots) && !is.null(dots)){
message("Default location and scale parameters will be used unless specified as extra arguments
in the function")
} else if(any(sapply(dots, function(x) is.character(x) || is.logical(x)))) {
stop("Optional arguments must be numeric")
} else {
message("Extra arguments will be passed to inverse function")
}
# What values can the inverse arg take?
inverse <- match.arg(inverse,
choices = c(
'rbeta','rbinom','rcauchy'
,'rchisq','rexp','rf'
,'rgamma','rgeom','rhyper'
,'rlnorm','rmultinorm','rnbinom'
,'rnorm','rpois','rt'
,'runif','rweibull','rsignrank'
,'rwilcox','rlogis'
),
several.ok = FALSE
)
# Set up vector of values for inverse function
randomly_gen_data <- if (!is_empty(dots)) {
lapply(n, function(size) {
do.call(get(inverse), c(list(n = size), dots))
})
} else {
lapply(n, function(size) {
get(inverse)(n = size)
})
}
randomly_gen_data <- Map(apply_na_padding, randomly_gen_data, n)
# Combine padded data into a matrix
randomly_gen_data_matrix <- do.call(cbind, randomly_gen_data)
randomly_gen_data_matrix <- randomly_gen_data_matrix[complete.cases(randomly_gen_data_matrix), ]
# Standardize vector of values for inverse function
centered_random_data <- scale(randomly_gen_data_matrix)
# Resample with replacement from vector of values for inverse
resampled_data <- lapply(1:length(n),
function(i) {
sample(
na.omit(
centered_random_data[, i]
),
size = samples,
replace = TRUE)
}
)
resampled_data_df <- data.frame(resampled_data)
colnames(resampled_data_df) <- as.character(n)
return(resampled_data_df)
}
simulate_clt(n = c(10,50,100),inverse = "rcauchy",location = 1, scale = 2) -> test2
View(test2)
simulate_clt(n = c(10,50,150,250),inverse = "rlnorm",meanlog = 2,sdlog = 5)
simulate_clt(n = c(10,50,150,250),inverse = "rlnorm",meanlog = 2,sdlog = 5) -> test
View(test)
rlnorm(50,meanlog = 2,sdlog = 5)
library(despair)
demotivate()
demotivate()
demotivate()
demotivate()
demotivate()
demotivate()
?double
double(1)
double(15)
simulate_clt(n = c(10,50,150,250),inverse = "rlnorm",meanlog = 2,sdlog = 5) -> data
clt_evaluated_data <- lapply(data,function(col){
sum(ifelse(
abs(data[, col]) > ci, 1, 0
)
) / nrow(data)
}
)
clt_evaluated_data <- lapply(data,function(col){
sum(ifelse(
abs(data[, col]) > 1.96, 1, 0
)
) / nrow(data)
}
)
clt_evaluated_data <- lapply(data,function(col){
sum(ifelse(
abs(col) > 1.96, 1, 0
)
) / nrow(data)
}
)
View(clt_evaluated_data)
simulate_clt <- function(n = NULL,
inverse = NULL,
samples = 249,
...){
stopifnot(is.numeric(n),
is.null(inverse) || is.character(inverse),
is.null(samples) || is.numeric(samples)
)
if(min(n) <= 1 || !is.numeric(n)){
stop("n must be an atomic vector of integers greater than 1")
}
# Capture extra arguments passed to inverse
dots <- list(...)
# Check if dots are empty or of an invalid class
if(is_empty(dots) && !is.null(dots)){
message("Default location and scale parameters will be used unless specified
as extra arguments in the function")
} else if(any(sapply(dots, function(x) is.character(x) || is.logical(x)))) {
stop("Optional arguments must be numeric")
} else {
message("Extra arguments will be passed to inverse function")
}
# What values can the inverse arg take?
inverse <- match.arg(inverse,
choices = c(
'rbeta','rbinom','rcauchy'
,'rchisq','rexp','rf'
,'rgamma','rgeom','rhyper'
,'rlnorm','rmultinorm','rnbinom'
,'rnorm','rpois','rt'
,'runif','rweibull','rsignrank'
,'rwilcox','rlogis'
),
several.ok = FALSE
)
# Set up vector of values for inverse function
randomly_gen_data <- if (!is_empty(dots)) {
lapply(n, function(size) {
do.call(get(inverse), c(list(n = size), dots))
})
} else {
lapply(n, function(size) {
get(inverse)(n = size)
})
}
randomly_gen_data <- Map(apply_na_padding, randomly_gen_data, n)
# Combine padded data into a matrix
randomly_gen_data_matrix <- do.call(cbind, randomly_gen_data)
randomly_gen_data_matrix <- randomly_gen_data_matrix[complete.cases(randomly_gen_data_matrix), ]
# Standardize vector of values for inverse function
centered_random_data <- scale(randomly_gen_data_matrix)
# Resample with replacement from vector of values for inverse
resampled_data <- lapply(1:length(n),
function(i) {
sample(
na.omit(
centered_random_data[, i]
),
size = samples,
replace = TRUE)
}
)
resampled_data_df <- data.frame(resampled_data)
colnames(resampled_data_df) <- as.character(n)
return(resampled_data_df)
}
simulate_clt(n = c(10,50,150,250),inverse = "rlnorm",meanlog = 2,sdlog = 5) -> data
?Map
simulate_clt <- function(n = NULL,
inverse = NULL,
samples = 249,
...){
stopifnot(is.numeric(n),
is.null(inverse) || is.character(inverse),
is.null(samples) || is.numeric(samples)
)
if(min(n) <= 1 || !is.numeric(n)){
stop("n must be an atomic vector of integers greater than 1")
}
# Capture extra arguments passed to inverse
dots <- list(...)
# Check if dots are empty or of an invalid class
if(is_empty(dots) && !is.null(dots)){
message("Default location and scale parameters will be used unless specified
as extra arguments in the function")
} else if(any(sapply(dots, function(x) is.character(x) || is.logical(x)))) {
stop("Optional arguments must be numeric")
} else {
message("Extra arguments will be passed to inverse function")
}
# What values can the inverse arg take?
inverse <- match.arg(inverse,
choices = c(
'rbeta','rbinom','rcauchy'
,'rchisq','rexp','rf'
,'rgamma','rgeom','rhyper'
,'rlnorm','rmultinorm','rnbinom'
,'rnorm','rpois','rt'
,'runif','rweibull','rsignrank'
,'rwilcox','rlogis'
),
several.ok = FALSE
)
# Set up vector of values for inverse function
randomly_gen_data <- if (!is_empty(dots)) {
lapply(n, function(size) {
do.call(get(inverse), c(list(n = size), dots))
})
} else {
lapply(n, function(size) {
get(inverse)(n = size)
})
}
randomly_gen_data <- Map(apply_na_padding, randomly_gen_data, n)
# Combine padded data into a matrix
randomly_gen_data_matrix <- suppressWarnings(
{do.call(cbind, randomly_gen_data)}
)
randomly_gen_data_matrix <- randomly_gen_data_matrix[complete.cases(randomly_gen_data_matrix), ]
# Standardize vector of values for inverse function
centered_random_data <- scale(randomly_gen_data_matrix)
# Resample with replacement from vector of values for inverse
resampled_data <- lapply(1:length(n),
function(i) {
sample(
na.omit(
centered_random_data[, i]
),
size = samples,
replace = TRUE)
}
)
resampled_data_df <- data.frame(resampled_data)
colnames(resampled_data_df) <- as.character(n)
return(resampled_data_df)
}
simulate_clt(n = c(10,50,150,250),inverse = "rlnorm",meanlog = 2,sdlog = 5) -> data
View(data)
devtools::load_all()
simulate_clt(n = c(10,50,150,250),inverse = "rnbeta",meanlog = 2,sdlog = 5) -> data
simulate_clt(n = c(10,50,150,250),inverse = "rweibull") -> data
simulate_clt(n = c(10,50,150,250),inverse = "rweibull",shape = 3) -> data
evaluate_clt(data,1.96)
evaluate_data(data,1.96)
simulate_clt(n = c(10,50,150,250),inverse = "rweibull",sample = 5000,shape = 3) -> data
evaluate_data(data,1.96)
devtools::Load_all()
devtools::load_all()
data
graph_data(data,ci = 1.96,compile_gif = TRUE,samples = 5000,n = c(10,50,150,250), a = 0.05)
devtools::load_all()
graph_data(data,ci = 1.96,compile_gif = TRUE,samples = 5000,n = c(10,50,150,250), a = 0.05)
graph_data(data,ci = 1.96,compile_gif = TRUE,samples = 5000,n = c(10,50,150,250), a = 0.05)
devtools::load_all()
graph_data(data,ci = 1.96,compile_gif = TRUE,samples = 5000,n = c(10,50,150,250), a = 0.05)
devtools::load_all()
graph_data(data,ci = 1.96,compile_gif = TRUE,samples = 5000,n = c(10,50,150,250), a = 0.05)
devtools::load_all()
graph_data(data,ci = 1.96,compile_gif = TRUE,samples = 5000,n = c(10,50,150,250), a = 0.05)
evaluate_data(data,ci = 1.96)
evaluate_data(data,ci = 1.96)[1]
evaluate_data(data,ci = 1.96) -> a
View(a)
devtools::load_all()
graph_data(data,ci = 1.96,compile_gif = TRUE,samples = 5000,n = c(10,50,150,250), a = a)
devtools::load_all()
graph_data(data,ci = 1.96,compile_gif = TRUE,samples = 5000,n = c(10,50,150,250), a = a)
devtools::load_all()
graph_data(data,ci = 1.96,compile_gif = TRUE,samples = 5000,n = c(10,50,150,250), a = a)
devtools::load_all()
graph_data(data,ci = 1.96,compile_gif = TRUE,samples = 5000,n = c(10,50,150,250), a = a)
devtools::load_all()
graph_data(data,ci = 1.96,compile_gif = TRUE,samples = 5000,n = c(10,50,150,250), a = a)
df <- data.frame(group1 = rnorm(100), group2 = rnorm(100))
evaluate_data(df, 1.96)
graph_data(df, ci = 1.96, samples = 2, n = c(100, 100), a = c(0.05, 0.07))
graph_data(df, ci = 1.96, samples = 2, n = c(100, 100), a = c(0.05, 0.07), compile_gif = TRUE)
devtools::document()
usethis::use_testthat()
test_that("simulate_clt returns a data frame with correct dimensions", {
result <- simulate_clt(n = c(10, 20), inverse = "rnorm", samples = 100)
expect_s3_class(result, "data.frame")
expect_equal(ncol(result), 2)
expect_equal(nrow(result), 100)
})
library(testthat)
library(eccentric)
devtools::load_all()
result <- simulate_clt(n = c(30), inverse = "rnorm", samples = 50)
col_mean <- mean(result[[1]])
col_sd <- sd(result[[1]])
z <- c(NA, NA, NA)
result <- evaluate_data(z, ci = 2)
is.numeric(c(NA,NA,NA))
is.numeric(c(NA_real_,NA_real_,NA_real_))
devtools::check()
tools::showNonASCIIfile()
tools::showNonASCIIfile(here::here())
install.packages("here")
tools::showNonASCIIfile(here::here())
?na.omit
?complete.cases
devtools::check()
devtools::check()
devtools::check()
usethis::use_package("ggplot2")
usethis::use_package("magick")
usethis::use_import_from("gtools","mixedsort")
devtools::check()
devtools::check()
usethis::use_package("withr")
devtools::check()
devtools::check()
devtools::check()
devtools::load_all()
data <- simulate_clt(n = c(10,25,30,50,70,100,200,500,900),inverse = "rexp",samples = 3449,rate = 2.35)
a <- evaluate_data(data,ci = 1.96)
graph_data(data,ci = 1.96,compile_gif = TRUE,samples = 3449,n = c(10,25,30,50,70,100,200,500,900), a = a)
devtools::build_readme()
